import torch.nn as nn
import torch
class GruEncoder(nn.Module):
    def __init__(self, input_size =1, hidden_size= 64, num_layers = 1, dropout = 0.1):
        super(GruEncoder, self).__init__()
        self.gru = nn.GRU(input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, batch_first=True, dropout=dropout)
        self.hidden_size = hidden_size
    
    def forward(self, x):
        # x shape: (batch_size, sequence_length, input_size)
        h_0 = torch.zeros(self.gru.num_layers, x.size(0), self.hidden_size).to(x.device)
        output, h_n = self.gru(x, h_0)
        return output, h_n
        
class UNetDecoder(nn.Module):
    def __init__(self, d_model: int, dropout: float = 0.1):
        super().__init__()
        self.dropout = nn.Dropout(dropout)
        self.conv1 = nn.Conv1d(d_model, 256, kernel_size=2, padding=1)
        self.pool1 = nn.MaxPool1d(kernel_size=2)  # Max pooling layer after conv1
        self.conv2 = nn.Conv1d(256, 1024, kernel_size=4, padding=1)
        self.conv_transpose1 = nn.ConvTranspose1d(in_channels=512, out_channels=1024, kernel_size=2, padding=1)
        self.conv_transpose2 = nn.ConvTranspose1d(in_channels=1, out_channels=1, kernel_size=4, padding=1)
        self.pool2 = nn.MaxPool1d(kernel_size=2)  # Max pooling layer after conv2
        self.conv3 = nn.Conv1d(1024, 2048, kernel_size=2, padding=1)
        self.pool3 = nn.MaxPool1d(kernel_size=2)  # Max pooling layer after conv3
        self.conv4 = nn.Conv1d(283, 128, kernel_size=2, padding=1)
        self.conv5 = nn.Conv1d(128, 283, kernel_size=4, padding=1)
        
        self.relu = nn.ReLU()
        self.gelu = nn.LeakyReLU()

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        # Assuming x has shape [batch_size, sequence_length, d_model]
        x = x.permute(0, 2, 1)  # Change shape to [batch_size, d_model, sequence_length]

        # Pass through the Conv1d, BatchNorm, GELU, and MaxPool layers
        x = self.gelu(self.conv1(x))
        x = self.gelu(self.conv2(x))
        x = self.gelu(self.conv3(x))
        """
        x = self.gelu(self.b10(self.conv10(x)))
        x = self.pool10(x)
        x = self.gelu(self.b11(self.conv11(x)))
        x = self.pool11(x)
        """
        
        # Optionally, permute back to the original shape if needed
        x = x.permute(0, 2, 1)  # Change shape back to [batch_size, sequence_length, d_model]
        return x

class GruEncoderDecoder(nn.Module):
    def __init__(self, input_size: int, hidden_size: int, num_layers: int = 1, dropout: float = 0.1):
        super(GruEncoderDecoder, self).__init__()
        self.encoder = GruEncoder(input_size, hidden_size, num_layers, dropout)
        self.decoder = UNetDecoder(hidden_size, dropout)
    def forward(self, x):
        encoder_output, _ = self.encoder(x)
        decoder_output = self.decoder(encoder_output)
        return decoder_output
    
